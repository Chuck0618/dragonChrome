// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_math from "rescript/lib/es6/js_math.js";
import * as LeaferUi from "leafer-ui";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function appname(param) {
  return "my name is dragon";
}

var gameStateDate = {
  scoreNow: 0,
  scoreMax: 0
};

var leaferJsConfig_width = 600;

var leaferJsConfig_height = 400;

var leaferJsConfig = {
  view: window,
  width: leaferJsConfig_width,
  height: leaferJsConfig_height
};

var leafer = new LeaferUi.Leafer(leaferJsConfig);

var x_offset = [
  850,
  894,
  938,
  982,
  1026,
  1070
];

var fillContainer = [];

var fillDefault_offset = {
  x: 0,
  y: 0
};

var fillDefault = {
  type: "image",
  url: "./src/dragon.png",
  mode: "clip",
  offset: fillDefault_offset
};

function fillx(x1) {
  var f_offset = {
    x: -x1 | 0,
    y: 2
  };
  var f = {
    type: "image",
    url: "./src/dragon.png",
    mode: "clip",
    offset: f_offset
  };
  fillContainer.push(f);
}

x_offset.forEach(fillx);

fillContainer.forEach(function (x) {
      console.log(x);
    });

var dragonState = {
  y: 168,
  vy: 0.0,
  state: {
    TAG: /* Stop */2,
    _0: 5
  },
  ay: 0.20,
  y0: 166,
  x0: 20
};

var dragonSoulRect = new LeaferUi.Rect({
      x: dragonState.x0,
      y: dragonState.y0,
      width: 39,
      height: 56,
      fill: fillContainer[0],
      draggable: false
    });

leafer.add(dragonSoulRect);

setInterval((function (param) {
        var ind = dragonState.state;
        switch (ind.TAG | 0) {
          case /* Run */0 :
              var v = ind._0 === 2 ? 3 : 2;
              dragonState.state = {
                TAG: /* Run */0,
                _0: v
              };
              return ;
          case /* Jump */1 :
          case /* Stop */2 :
              return ;
          
        }
      }), 200);

function updatePosition(param) {
  dragonState.y = dragonState.y + Js_math.floor_int(dragonState.vy) | 0;
  dragonState.vy = dragonState.vy + dragonState.ay;
  if (dragonState.y >= dragonState.y0) {
    dragonState.y = dragonState.y0;
    dragonState.vy = 0.0;
    dragonState.state = {
      TAG: /* Run */0,
      _0: 2
    };
    return ;
  }
  
}

function updateDragon(param) {
  var ind = dragonState.state;
  switch (ind.TAG | 0) {
    case /* Jump */1 :
        updatePosition(undefined);
        dragonSoulRect.y = dragonState.y;
        dragonSoulRect.fill = fillContainer[ind._0];
        return ;
    case /* Run */0 :
    case /* Stop */2 :
        dragonSoulRect.fill = fillContainer[ind._0];
        return ;
    
  }
}

var offsetObstructSmall = [
  {
    x: 262,
    y: 2
  },
  {
    x: 292,
    y: 2
  }
];

var offsetObstructLarge = [
  {
    x: 331,
    y: 2
  },
  {
    x: 351,
    y: 2
  }
];

var fillContainerTreeSmall = [];

var fillContainerTreeLarge = [];

function push(ct, cor) {
  var f_offset = {
    x: -cor.x | 0,
    y: -cor.y | 0
  };
  var f = {
    type: "image",
    url: "./src/dragon.png",
    mode: "clip",
    offset: f_offset
  };
  ct.push(f);
}

offsetObstructSmall.forEach(function (cor) {
      push(fillContainerTreeSmall, cor);
    });

offsetObstructLarge.forEach(function (param) {
      return push(fillContainerTreeLarge, param);
    });

var treeStateDate = {
  x1: 300,
  y1: 182,
  x2: 400,
  y2: 168,
  isStart: false,
  vx: 0.0,
  passSmall: 0,
  passLarge: 0
};

var treeRectSmall = new LeaferUi.Rect({
      x: treeStateDate.x1,
      y: treeStateDate.y1,
      width: 18,
      height: 40,
      fill: fillContainerTreeSmall[0],
      draggable: false
    });

var treeRectLarge = new LeaferUi.Rect({
      x: treeStateDate.x2,
      y: treeStateDate.y2,
      width: 25,
      height: 54,
      fill: fillContainerTreeLarge[0],
      draggable: false
    });

leafer.add(treeRectSmall);

leafer.add(treeRectLarge);

treeStateDate.vx = -3.0;

treeStateDate.isStart = true;

function updateTree(param) {
  if (!treeStateDate.isStart) {
    return ;
  }
  treeStateDate.x1 = treeStateDate.x1 + Js_math.floor_int(treeStateDate.vx) | 0;
  treeStateDate.x2 = treeStateDate.x2 + Js_math.floor_int(treeStateDate.vx) | 0;
  if (treeStateDate.x1 < -10) {
    treeStateDate.passSmall = treeStateDate.passSmall + 1 | 0;
    var w = 600;
    var width = w !== undefined ? w : 600;
    treeStateDate.x1 = width + Js_math.random_int(0, 500) | 0;
    if (treeStateDate.x1 > (treeStateDate.x2 - 10 | 0) && treeStateDate.x1 < (treeStateDate.x2 + 30 | 0)) {
      treeStateDate.x1 = (treeStateDate.x2 + 30 | 0) + Js_math.random_int(0, 500) | 0;
    }
    
  }
  if (treeStateDate.x2 < -10) {
    treeStateDate.passLarge = treeStateDate.passLarge + 1 | 0;
    var w$1 = 600;
    var width$1 = w$1 !== undefined ? w$1 : 600;
    treeStateDate.x2 = width$1 + Js_math.random_int(0, 500) | 0;
    if (treeStateDate.x2 > (treeStateDate.x1 - 10 | 0) && treeStateDate.x2 < (treeStateDate.x1 + 30 | 0)) {
      treeStateDate.x2 = (treeStateDate.x1 + 30 | 0) + Js_math.random_int(0, 500) | 0;
    }
    
  }
  gameStateDate.scoreNow = Math.imul(treeStateDate.passLarge, 20) + Math.imul(treeStateDate.passSmall, 10) | 0;
  treeRectSmall.x = treeStateDate.x1;
  treeRectLarge.x = treeStateDate.x2;
}

var roadStateDate = {
  isStart: false,
  x1: 0,
  x2: 1200,
  vx: -3
};

var roadSoul_offset = {
  x: 0,
  y: -53
};

var roadSoul = {
  type: "image",
  url: "./src/dragon.png",
  mode: "clip",
  offset: roadSoul_offset
};

var road_01 = new LeaferUi.Rect({
      x: 0,
      y: 200,
      width: 1200,
      height: 12,
      fill: roadSoul,
      draggable: false
    });

var road_02 = new LeaferUi.Rect({
      x: 1200,
      y: 200,
      width: 1200,
      height: 12,
      fill: roadSoul,
      draggable: false
    });

leafer.add(road_01);

leafer.add(road_02);

roadStateDate.isStart = true;

function updateRoad(param) {
  if (roadStateDate.isStart) {
    roadStateDate.x1 = roadStateDate.x1 + roadStateDate.vx | 0;
    roadStateDate.x2 = roadStateDate.x2 + roadStateDate.vx | 0;
    if (roadStateDate.x1 < -1200) {
      roadStateDate.x1 = roadStateDate.x2 + 1200 | 0;
    }
    if (roadStateDate.x2 < -1200) {
      roadStateDate.x2 = roadStateDate.x1 + 1200 | 0;
    }
    road_01.x = roadStateDate.x1;
    road_02.x = roadStateDate.x2;
    return ;
  }
  
}

var textScoreNow = new LeaferUi.Text({
      fill: "rgb(50,50,70)",
      text: "",
      x: 100,
      y: 30
    });

var textScoreMax = new LeaferUi.Text({
      fill: "rgb(50,50,70)",
      text: "",
      x: 100,
      y: 45
    });

function updateTextNow(param) {
  textScoreNow.text = "当前得分：" + gameStateDate.scoreNow.toString();
}

function updateTextMax(param) {
  textScoreMax.text = "最高得分：" + gameStateDate.scoreMax.toString();
}

leafer.add(textScoreNow);

leafer.add(textScoreMax);

textScoreNow.text = "Game Not Start! 按这个键开始----->";

updateTextMax(undefined);

var fillButton_offset = {
  x: 2,
  y: 2
};

var fillButton = {
  type: "image",
  url: "./src/dragon.png",
  mode: "clip",
  offset: fillButton_offset
};

var button = new LeaferUi.Rect({
      x: 300,
      y: 20,
      width: 40,
      height: 40,
      fill: fillButton,
      draggable: false
    });

leafer.add(button);

function testDead(param) {
  var test1 = Math.abs(dragonState.x0 - treeStateDate.x1 | 0) < 18 && Math.abs(dragonState.y - treeStateDate.y1 | 0) < 30;
  var test2 = Math.abs(dragonState.x0 - treeStateDate.x2 | 0) < 20 && Math.abs(dragonState.y - treeStateDate.y2 | 0) < 40;
  if (test1) {
    return true;
  } else {
    return test2;
  }
}

function gameover(param) {
  console.log("Dead!");
  treeStateDate.passLarge = 0;
  treeStateDate.passSmall = 0;
  treeStateDate.x1 = Js_math.random_int(500, 600);
  treeStateDate.x2 = Js_math.random_int(630, 800);
  if (gameStateDate.scoreNow > gameStateDate.scoreMax) {
    gameStateDate.scoreMax = gameStateDate.scoreNow;
    updateTextMax(undefined);
  }
  gameStateDate.scoreNow = 0;
  var ev = gameStateDate.gameEvent;
  if (ev !== undefined) {
    gameStateDate.gameEvent = undefined;
    leafer.off_(Caml_option.valFromOption(ev));
    return ;
  }
  
}

function gameloop(param) {
  updateDragon(undefined);
  updateRoad(undefined);
  updateTree(undefined);
  updateTextNow(undefined);
  if (testDead(undefined)) {
    return gameover(undefined);
  }
  
}

button.on(LeaferUi.PointerEvent.DOWN, (function (param) {
        var ev = gameStateDate.gameEvent;
        if (ev !== undefined) {
          leafer.off_(Caml_option.valFromOption(ev));
          gameStateDate.gameEvent = undefined;
        } else {
          gameStateDate.gameEvent = Caml_option.some(leafer.on_(LeaferUi.AnimateEvent.FRAME, gameloop));
        }
      }));

function jumpTask(param) {
  dragonState.vy = -6.0;
  dragonState.state = {
    TAG: /* Jump */1,
    _0: 0
  };
  console.log("Time up!");
}

function captureCommand(param) {
  var match = dragonState.state;
  switch (match.TAG | 0) {
    case /* Run */0 :
        return jumpTask(undefined);
    case /* Jump */1 :
        return ;
    case /* Stop */2 :
        dragonState.state = {
          TAG: /* Run */0,
          _0: 2
        };
        return ;
    
  }
}

leafer.on_(LeaferUi.PointerEvent.DOWN, (function (param) {
        captureCommand(undefined);
      }));

var rectTimeDuration = 200;

var roadRangeMax = 1200;

export {
  appname ,
  gameStateDate ,
  leaferJsConfig ,
  leafer ,
  x_offset ,
  fillContainer ,
  fillDefault ,
  fillx ,
  dragonState ,
  dragonSoulRect ,
  rectTimeDuration ,
  updatePosition ,
  updateDragon ,
  offsetObstructSmall ,
  offsetObstructLarge ,
  fillContainerTreeSmall ,
  fillContainerTreeLarge ,
  push ,
  treeStateDate ,
  treeRectSmall ,
  treeRectLarge ,
  updateTree ,
  roadRangeMax ,
  roadStateDate ,
  roadSoul ,
  road_01 ,
  road_02 ,
  updateRoad ,
  textScoreNow ,
  textScoreMax ,
  updateTextNow ,
  updateTextMax ,
  fillButton ,
  button ,
  testDead ,
  gameover ,
  gameloop ,
  jumpTask ,
  captureCommand ,
}
/* leaferJsConfig Not a pure module */
